

# method printing the usage
usage() {
	cat <<EOT >&2
usage:	$0 [options] REGION 
	runs the interface $FB_INTERFACENAME
	-e	skip exporting data into delta files
	-l	skip loading data into buffering-tables
	-m	do not send emails
	-s	do not send delta files
	-v	do not export/import; just move away input files
	-f	only import first set of input data files
	-q	quiet; do not print messages (except for error messages)
	-h	show this help message

	example:
	$1 -e -s \>\$FB_LOG 2\>\>\$FB_ERRORLOG
EOT
	
	exit 1
}



#### read command line options
FB_NOEXPORT=		# skip exporting data into delta file
FB_NOLOAD=			# skip loading data into buffering-tables
FB_NOMAILS=			# used in mail functions
FB_NOSEND=			# do not send delta files
FB_ONLYMOVE=		# only move away input files
FB_ONLYFIRST=		# only import first set of data files
FB_QUIET=			# used in function fb_log()
FB_REGION=          # region which this interface run should be restricted for

while getopts "elmsqh?" option; do
	case "$option" in
	e)	FB_NOEXPORT=Y ;;
	l)	FB_NOLOAD=Y ;;
	m)	FB_NOMAILS=Y ;;
	s)	FB_NOSEND=Y ;;
	v)	FB_ONLYMOVE=Y ;;
	f)	FB_ONLYFIRST=Y ;;
	q)	FB_QUIET=Y ;;
	*)	usage ;;
	esac
done
shift `expr $OPTIND - 1`

  #### get the region code
  FB_REGION="$1"
 
 # do not fail already here since not all interfaces require the region code
  #[ -z "$FB_REGION" ] && usage
  shift
export $FB_REGION
 
#export $FB_INTERFACENAME
#### read command line arguments
[ -z "$1" ] || usage
unset usage



# ensure FB_COMMONDIR is set
[ -n "$FB_CSCRIPTDIR" ] || FB_CSCRIPTDIR=${0%/*}
[ "$FB_CSCRIPTDIR" = "$0" ] && FB_CSCRIPTDIR=.


#### set environment variables
if [ ! -r $FB_CSCRIPTDIR/fb_env.sh ]; then
	echo "Cannot find/read file $FB_CSCRIPTDIR/fb_env.sh" >&2
	exit 1
fi
. $FB_CSCRIPTDIR/fb_env.sh


#### check whether we have a working email program
if [ "$FB_NOMAILS" != "Y" -a -z "$FB_MAILPROG" ] ; then
	# print to stdout to indicate the problem!
	echo "Cannot find mail program! Check your PATH environment variable."
	echo 'Please fix it and try again or specify the "-m" parameter.'
	exit 1
fi


#### define shell functions
if [ ! -r $FB_CSCRIPTDIR/fb_lib.sh ]; then
	echo "Cannot find/read file $FB_CSCRIPTDIR/fb_lib.sh" >&2
	exit 1
fi
. $FB_CSCRIPTDIR/fb_lib.sh


#### check for other neccessary programs
[ -z "$FB_SQLPLUS" ] &&	fb_error "fb_main.sh: cannot find SQLPLUS program"
[ -z "$FB_SQLLOAD" ] && fb_error "fb_main.sh: cannot find SQLOAD program"
[ -z "$FB_TNSPING" ] && fb_error "fb_main.sh: cannot find TNSPING program"
[ -z "$FB_ZIP" ] && fb_warn "fb_main.sh: no compression program defined!"
[ -z "$FB_FTP" ] && fb_error "fb_main.sh: cannot find FTP program"
[ "x$FB_USE_SFTP_INSTEAD_OF_FTP" = "xY" -a -z "$FB_SFTP" ] && fb_error "fb_main.sh: cannot find SFTP program"

#### start the interface - log the time
start_time=`fb_time`
fb_log -s 3 'starting script; $Id: fb_main.sh 29204 2008-07-04 06:22:37Z gyan_k $'
fb_log "running $FB_INTERFACEID interface ( started " `fb_timestamp` ")"


 #### check the regional code
 if [ "x$FB_NEEDREGION" = "xY" ] ; then
     fb_log "Region code required. Checking validity of '$FB_REGION'."
	 fb_checkregion "$FB_REGION"
	     # fb_checkregion exists if it cannot validate the region code passed to it
	     else
		 FB_REGION=""
		     fb_log "Ignoring region code since it is not needed."
		     fi


fb_checkenabled


fb_lock

#### store the region code in the database (this must be done only after
#### the interface has been locked by 'fb_lock')
## ~ XXX shouldn't we check for the existence of the record we are going to update here?
## see also $IF_INTERFACEID/import.sql
if [ "x$FB_NEEDREGION" = "xY" ] ; then
    # 'fb_checkregion' called previously has already validated the
	# region code. so at this point of time we can assume that it is
	    # correct and store it in the database to make it available to any
		# SQL code that will be run later during this interface run
		    fb_xsqlcmd "set termout off;
		    update if_interface set region_code = '$FB_REGION' where interface_id = '$FB_INTERFACEID';
		    commit;"
			# export the variable so it will available to subprocesses; especially
			    # to shell functions invoked in sub-shells
				export FB_REGION
				else
				    fb_xsqlcmd "set termout off;
				    update if_interface set region_code = NULL where interface_id = '$FB_INTERFACEID';
				    commit;"
				    fi




#### log interrupt and call cleanup procedure
trap "fb_error RECEIVED SIGHUP"   1
trap "fb_error RECEIVED SIGINT"   2
trap "fb_error RECEIVED SIGQUIT"  3
trap "fb_error RECEIVED SIGTERM" 15


  if [ "x$FB_DELETE_BEFORE" = "xY" ] ; then
	fb_delbeforeload $FB_INFILEDIR
  fi

#### some helper functions ######

# open a connection to $FTP_SERVER as $FTP_USER with $FTP_PASSWORD
# and carry out commands specified as the first argument. To concatenate
# more ftp commands pass them as a string separated by a newline.
# if the command fails non-zero is returned, otherwise a 0 gets 
# back to the caller.
fb_with_ftp() {
	local ftp_command
    if [ "x$FB_USE_SFTP_INSTEAD_OF_FTP" = "xY" ] ; then
        ftp_command="$1"
    else
        ftp_command="open $FTP_SERVER
user $FTP_USER $FTP_PASSWORD 
binary
passive
$1
bye"
    fi
	fb_dbg "fb_main.sh:fb_with_ftp: Issuing the following FTP command:\n\n$ftp_command\n"
	# the problem is that i cannot get the ftp client to return non-zero values :(
	# am i missing something? -- pete.
    if [ "x$FB_USE_SFTP_INSTEAD_OF_FTP" = "xY" ] ; then
        # XXX here is a leak! what about handling login failures?
        echo "$ftp_command" | $FB_SFTP -b - $SFTP_USER@$SFTP_SERVER 2>&1 | grep -v '^sftp>'
    else
        local ftp_output=`echo "$ftp_command" | $FB_FTP -i -n`
        fb_dbg "Got the following ftp output:\n$ftp_output"
        local ftp_return_value=$?
        local login_failed=`echo "$ftp_output" | grep 'Login failed.'`
        if [ -n "$login_failed" ] ; then
            fb_error "fb_main.sh:fb_with_ftp: Login to FTP server failed! See the session output:\n$ftp_output"
        else
            echo "$ftp_output"
            if [ "$ftp_return_value" -ne 0 ] ; then
                false
            else
                true
            fi
        fi
    fi
	# the return value of the FTP command is returned
}

# remove files (specified as arguments) from the ftp 
# server using the fb_with_ftp command. The files must
# be located in $FTP_DIRECTORY on the ftp server.
fb_ftp_delete() {
	local ftpcmd="cd $FTP_DIRECTORY"
    local ftprmcmd=""
	local iter
    if [ "x$FB_USE_SFTP_INSTEAD_OF_FTP" = "xY" ] ; then
        ftprmcmd="rm"
    else
        ftprmcmd="del"
    fi
	for iter in $@ ; do
		[ -n "$iter" ] && \
			ftpcmd="$ftpcmd
                    $ftprmcmd $iter"
	done
	fb_with_ftp "$ftpcmd"
}


if [ -n "$FTP_SERVER" -a "$FB_NOLOAD" != "Y" ]; then
	fb_log -s 3 "working with ftp ..."

	while [ 1 ]; do
		fb_log "listing files on ftp..."

        local ftpoutput=""
        if [ "x$FB_USE_SFTP_INSTEAD_OF_FTP" = "xY" ] ; then
            ftpoutput=`fb_with_ftp "ls -l $FTP_DIRECTORY"`
        else
            ftpoutput=`fb_with_ftp "ls $FTP_DIRECTORY"`
        fi
		[ "$?" -eq 0 ] || fb_error "fb_main.sh: error while listing files from ftp"
       fb_log -s 3 "ftpoutput: $ftpoutput"
		
    	case "$FTP_DIRECTORY_MODE" in 
    	windows) 	local filelist=`echo "$ftpoutput" | awk '{print $4}' | sort`;;
    	*)	        local filelist=`echo "$ftpoutput" | awk '{print $9}' | sort`;;	
    	esac
		fb_log "files found on ftp: `echo "\\n$filelist" | sed -e 's/.*/    &/'`"
		
		filestodownload=`fb_getallinfiles $filelist`
  fb_log "files from fb_get are `echo "\\n$filestodownload"` "
        if [ $? -ne 0 ] ; then
            filestodownload=""
        fi

		witnessfiles=""
		for i in $filestodownload; do
			witness=`fb_getwitnessfile $i`
			witnessfiles="$witnessfiles $witness"
		done
		witnessfiles=`echo "$witnessfiles" | sort | uniq`

		if [ -z "$filestodownload" ]; then
			if [ "$FB_RETRYFTPDOWNLOAD" != "Y" ]; then
				
				fb_warn "No files for $FB_INTERFACEID found on FTP!"
				break
			else
				local now=`date +%H%M`
				
				if [ "$now" -ge "0600" -a "$now" -lt "0800" ]; then
					fb_log "No input data files found on ftp - waiting 10 minutes to retry!"
					sleep 600
					continue
				else
					fb_warn "No files for $FB_INTERFACEID found on FTP (no more retry since it's not 6am to 8am)!"
					break
				fi
			fi
		else
			filestodownload="$filestodownload $witnessfiles"

			mkdir -p $FB_INFILEDIR || fb_error "unable to create input files directory $FB_INFILEDIR"


			ftp_command="cd $FTP_DIRECTORY"
			for i in $filestodownload; do
				ftp_command="$ftp_command
					get $i $FB_INFILEDIR/$i"
			done
	fb_log "ftp commands (for downloading the input files): `echo "\\n$ftp_command" | sed -e 's/	/    /g'`"
			fb_with_ftp "$ftp_command" || fb_error "error while downloading files from ftp"

			fb_log "check if we have downloaded all the ftp..."
			for i in $filestodownload; do
				fb_checkfile $FB_INFILEDIR/$i
				fb_filevolumerecording "$FB_INFILEDIR/$i" "$FB_INTERFACEID" "$FB_REGION"
			done
		fi

		break
	done
else
	[ "$FB_NOLOAD" = "Y" ] || fb_warn -s 3 "no work with ftp since $FTP_SERVER (FTP_SERVER) is not defined"
fi

if [ $FB_INTERFACEID = "CRM" ]; then
  fb_log "checking for zero csv"
  fb_delzerofile $FB_INFILEDIR
fi


#### load and import data
fb_run_begin_script() {
	if [ -n "$FB_SQLBEGINFILE" ]; then
	  fb_log "open interface run..."
		fb_xsqlfile $FB_ISCRIPTDIR/$FB_SQLBEGINFILE $FB_SQLBEGINARGS
	fi
}

fb_run_import_script() {
	# import the data from buffering-tables
    fb_log "open import sql file ..."

      if [ "x$FB_COUNTRY" = "xY" ]; then
	   local fname=`echo "$cleanfilename" |grep "LANG"`
		   if [ -n "$fname" ]; then
		         fb_xsqlfile $FB_ISCRIPTDIR/$FB_SQLIMPORTFILE2 $FB_SQLIMPORTARGS
                      else
	                    fb_xsqlfile $FB_ISCRIPTDIR/$FB_SQLIMPORTFILE1 $FB_SQLIMPORTARGS
                   fi
      else
          fb_xsqlfile $FB_ISCRIPTDIR/$FB_SQLIMPORTFILE $FB_SQLIMPORTARGS
	fi
}

fb_run_end_script() {
	# close interface run
	if [ -n "$FB_SQLENDFILE" ]; then
		fb_log "close interface run..."
		fb_xsqlfile $FB_ISCRIPTDIR/$FB_SQLENDFILE $FB_SQLENDARGS
	fi
}
 
fb_update_params () {
      if [ -n "`type fb_getcountrycode 2>/dev/null`" ]; then
	local f="$1"
	cc=`fb_getcountrycode $f`
	 dt=`fb_getdate $f`
   fb_log "$cc $dt and file is $f"
      fb_xsqlcmd "set termout off;
      update if_country_params set filedate = '$dt' where interface_id='$FB_INTERFACEID' and country_code='$cc';
	commit;"

      fi
		 }

#not working in fb_updates need to check
      #update if_country_params set last_loaded = (select to_date ('$dt','YYYY/MM/DD') where interface_id='$FB_INTERFACEID' and country_code='$cc') where interface_id='$FB_INTERFACEID' and country_code='$cc';

FB_MAIN_CLEANFILE_APPENDIX=".clean"

# if FB_ARCHIVEINPUT is "Y" then:
#   Move the passed file from FB_INFILEDIR to FB_ARCHIVEDIR and
#   call fb_saveold.
# else:
#   Delete the passed file from FB_INFILEDIR.
# Do always:
#   Delete also the cleanfile (inputfile + $FB_MAIN_CLEANFILE_APPENDIX)
#   Delete also the witnesfile if there is any in $FB_INFILEDIR
fb_archive_or_remove() {
	local f="$1"
	local cleanf="$f"${FB_MAIN_CLEANFILE_APPENDIX}
	local witf=""

	# get name of the witness file (unfortunatelly not all interfaces 
	# have witness files and some do not implement the fb_getwitnessfile
	# function :-/)
	if [ -n "`type fb_getwitnessfile 2>/dev/null`" ] ; then
		witf=`fb_getwitnessfile "$f"`
	fi

	if [ "$FB_ARCHIVEINPUT" = "Y" ]; then
		fb_log "archive imported data file $filename..."
		mkdir -p $FB_ARCHIVEDIR || \
			fb_error "unable to create archive directory $FB_ARCHIVEDIR"
		mv $FB_INFILEDIR/$f $FB_ARCHIVEDIR || \
			fb_error "unable to move $FB_INFILEDIR/$f to $FB_ARCHIVEDIR"
		fb_saveold $FB_ARCHIVEDIR/$f
	else
		fb_removefile $FB_INFILEDIR/$f
	fi
	# now delete the cleanfile
	if [ -n "$cleanf" ] ; then
		fb_dbg "Trying to remove cleanfile: $FB_INFILEDIR/$cleanf"
		fb_removefile $FB_INFILEDIR/$cleanf
	fi
	# now delete the witnessfile
	if [ -n "$witf" ] ; then
		fb_dbg "Trying to remove witnessfile: $FB_INFILEDIR/$witf"
		fb_removefile $FB_INFILEDIR/$witf
	fi
	return 0
}

if [ "$FB_NOLOAD" != "Y" ]; then
	fb_log -s 3 "loading data from $FB_INFILEDIR..."

	# get he files in the input directory
	filelist=`ls -1 $FB_INFILEDIR | sort`
	allinfiles=`fb_getallinfiles $filelist`
    if [ $? -ne 0 ] ; then
       allinfiles=""
    fi

	# error if there are no input files in input directory since this is not NO_LOAD interface!
	if [ -z "$allinfiles" ]; then
		fb_error "No files to import found in input directory ($FB_INFILEDIR) for $FB_INTERFACEID!"
	fi

	# run begin script before loading all files when we don't run data import per input file
	[ "$FB_RUNPERFILE" = "Y" ] || fb_run_begin_script

	# files which are to be deleted after they have been proccessed
	# this applies only when FB_RUNPERFILE is not set to "Y"
	ftp_filestodelete=""
	for i in $allinfiles; do
		filename=$FB_INFILEDIR/$i

		# store the country code to if_parameters
		cc=`fb_getcountrycode $i`
		dt=`fb_getdate $i`
		
		fb_xsqlcmd "set termout off;
		       update if_parameters set country_code = '$cc' where interface_id='$FB_INTERFACEID';
		       update if_parameters set filedate = '$dt' where interface_id='$FB_INTERFACEID' and region_code='$FB_REGION';
			commit;"

		# run begin script before loading each file when we run data import per input file
		[ "$FB_RUNPERFILE" = "Y" ] && fb_run_begin_script

		# pre-processing of the input file
		if [ -n "`type fb_preprocess 2>/dev/null`" ]; then
			cleanfilename=$filename${FB_MAIN_CLEANFILE_APPENDIX}
			fb_log "pre-processing input file $filename..."
			fb_logfileinfo $filename
			fb_removefile $cleanfilename
			cat $filename | fb_preprocess $i >$cleanfilename ||
					fb_error "error while pre-processing data file $filename failed"
		else
		    fb_dbg "fb_main.sh: no preprocessing for $filename"
		    cleanfilename=$filename
		fi
		fb_dbg "Cleanfile is: $cleanfilename"

		# print log info about what are we going to import
		fb_log -s 3 "loading file $cleandatafile..."
		fb_logfileinfo $cleanfilename

		# load the data
		ctlfilename=`fb_getctlfile $i`
		fb_xsqlload $cleanfilename $ctlfilename

		# run import and end scripts after loading each file when we run data import per input file
		if [ "$FB_RUNPERFILE" = "Y" ]; then
			fb_run_import_script
			fb_run_end_script
			if [ "x$FB_COUNTRY" = "xY" ] ; then
			   fb_update_params "$i"
                         fi      
			fb_archive_or_remove "$i"
		fi
#	    if [ "x$FB_COUNTRY" = "xY" ] ; then
#		  fb_update_params "$i"
#	    fi

		# when we got here, everything has gone alright so far, now we can
		# delete the file that we processed
		if [ "x$FTP_DELETE_FILES" = "xY" ] ; then 
			if [ "x$FB_RUNPERFILE" = "xY" ] ; then
				fb_log "deleting from ftp: $i `fb_getwitnessfile $i`"
				fb_ftp_delete "$i" "`fb_getwitnessfile $i`" || \
					fb_error "error while deleting files $i and `fb_getwitnessfile $i` from FTP server."
			else
				ftp_filestodelete="$ftp_filestodelete $i `fb_getwitnessfile $i`"
			fi
		fi

		# exit if only the first file should be loaded
		[ "$FB_ONLYFIRST" = "Y" ] && break
	done


	# run import and end scripts after all files were loaded when we run data import per input file
	if [ "$FB_RUNPERFILE" != "Y" ]; then
		fb_run_import_script
		fb_run_end_script
		for i in $allinfiles ; do
			fb_archive_or_remove "$i"
		done
	fi

    # delete files (at least witness files) from FTP if requested
	if [ -n "$ftp_filestodelete" ] ; then
		fb_log "deleting files from ftp ..."
		fb_ftp_delete $ftp_filestodelete || \
			fb_error "error while deleting files from ftp: $ftp_filestodelete"
	fi
else
	# load nothing - just import data from buffering-tables
	fb_run_begin_script
	fb_run_import_script
	fb_run_end_script
fi



#### cleanup
fb_cleanup || fb_error "fb_cleanup failed"



#### generate warninglog and send warning mail
fb_log "generating warning log..."
if [ -n "$FB_WARNINGLOG" ]; then
	fb_removefile $FB_WARNINGLOG
	if [ -n "$FB_WARNINGPATTERN" ]; then
		grep "$FB_WARNINGPATTERN" $FB_LOG >$FB_WARNINGLOG
	fi
fi



#### send success/warning mail
if [ "$FB_NOMAILS" != Y ]; then
	if [ `wc -l $FB_WARNINGLOG | cut -f 1 -d ' '` -gt 1 ]; then
		fb_log "sending warning mail..."
		fb_warningmail </dev/null || fb_error "fb_warningmail failed"
	else
		fb_removefile $FB_WARNINGLOG
	fi
	
	fb_log "sending success mail..."
	fb_successmail </dev/null || fb_error "fb_successmail failed"
fi



#### end message and exit
end_time=`fb_time`
elapsed_time=`fb_interval $start_time $end_time`
fb_log -s 3 'script ended; $Id: fb_main.sh 29204 2008-07-04 06:22:37Z gyan_k $'
fb_log "$FB_FULLINTERFACENAME succeeded"
fb_log "elapsed time $elapsed_time"
fb_log "exit with status 0"
exit 0




#
#	Generic File/Batch Interface
#
#	Bourne Shell Script
#
#	shell environment variable settings
#


## ensure that this file is executed only once
if [ -z "$FB_ENV_SH" ]; then
FB_ENV_SH=X


## call script $FB_MYENV (contains user settings)
FB_MYENV=${FB_MYENV:-$FB_SCRIPTDIR/$FB_INTERFACENAME/${FB_INTERFACENAME}_env.sh}

if [ -r "$FB_MYENV" ]; then
	. $FB_MYENV
	if [ "$?" != 0 ]; then
		echo "error while executing FB_MYENV file $FB_MYENV" >&2
		exit 1
	fi
else
	echo "WARNING: cannot read FB_MYENV file $FB_MYENV"
fi


## set the dabatase and mail parameters according to environmet where the interface is run
FB_HOST=`hostname`	# host name of computer running this program

if [ -n "$FB_REGION" ]; then
FB_MACHINEENV=${FB_MACHINEENV:-$FB_SCRIPTDIR/$FB_INTERFACENAME/${FB_INTERFACENAME}_env_${FB_HOST}_${FB_REGION}_${FB_COMPANYENV}.sh}
else 
FB_MACHINEENV=${FB_MACHINEENV:-$FB_SCRIPTDIR/$FB_INTERFACENAME/${FB_INTERFACENAME}_env_${FB_HOST}_${FB_COMPANYENV}.sh}
fi
if [ -r "$FB_MACHINEENV" ]; then
	. $FB_MACHINEENV
	if [ "$?" != 0 ]; then
		echo "error while executing FB_MACHINEENV file $FB_MACHINEENV" >&2
		exit 1
	fi
else
	echo "WARNING: cannot read FB_MACHINEENV file $FB_MACHINEENV"
fi


## set default values
#  interface info
[ -n "$FB_INTERFACEID" ] ||
	FB_INTERFACEID=								# ID of interface in TOL DB (tps_interface)

[ -n "$FB_INTERFACENAME" ] ||
	FB_INTERFACENAME=							# name of interface

[ -n "$FB_FULLINTERFACENAME" ] ||
	FB_FULLINTERFACENAME="File/Batch Interface"	# name of interface (used e.g. in mail messages)


#  switches

[ -n "$FB_DELETE_BEFORE" ] ||
	     FB_DELETE_BEFORE=N

[ -n "$FB_SAVEOLD_LASTONLY" ] ||
	FB_SAVEOLD_LASTONLY=N						# Y: save only last version as OLD.gz
												#    when saving files that would
												#    otherwise be overwritten
												# N: save old versions with timestamp
												#    when saving files that would
												#    otherwise be overwritten

[ -n "$FB_RUNPERFILE" ] ||
	FB_RUNPERFILE=N								# Y: run begin/import/end sql scripts
												#    for each file
												# N: run begin/import/end sql scripts
												#    only once after load of all the input files


[ -n "$FB_COUNTRY" ] ||                                                 #Added for country specific run --Gyan
	  FB_COUNTRY=

[ -n "$FB_ARCHIVEINPUT" ] ||
	FB_ARCHIVEINPUT=Y							# Y: archive files from FB_INPUTDIR
												#    to FB_ARCHIVEDIR
												# N: don't save them - just remove them

[ -n "$FB_NOLOAD" ] ||
	FB_NOLOAD=N									# Y: don't load the input files -
												#    just run sql scripts
												# N: run sql loader before FB_SQLIMPORTFILE

[ -n "$FB_RETRYFTPDOWNLOAD" ] ||
	FB_RETRYFTPDOWNLOAD=N						# Y: if no input files are found on ftp we try
												#    to list ftp files in 10 minutes again
												#    (since 6am to 8am)
												# N: just warn if there are no input files on ftp

[ -n "$FB_NEEDREGION" ] ||
   FB_NEEDREGION=Y                             # Y: require a region code as a parameter
                                                #    and check its validity and make it
                                                #    available to SQL code throught the
                                                #    IF_PARAMETERS table. (default: yes;
                                                #    only the CPA interface is not region
                                                #    specific)
                                                # N: ignore the region code parameter


#  directories
[ -n "$FB_BASEDIR" ] ||
	FB_BASEDIR=../..							# base directory

[ -n "$FB_SCRIPTDIR" ] ||
	FB_SCRIPTDIR=$FB_BASEDIR/scripts			# directory containing all the scripts

[ -n "$FB_CSCRIPTDIR" ] ||
	FB_CSCRIPTDIR=$FB_SCRIPTDIR/common			# common script directory for all intefraces

[ -n "$FB_ISCRIPTDIR" ] ||
	FB_ISCRIPTDIR=$FB_SCRIPTDIR/$FB_INTERFACENAME	# actuall interface script interface directory

[ -n "$FB_LOGDIR" ] ||
	FB_LOGDIR=$FB_BASEDIR/logs					# directory where we put log files

[ -n "$FB_IDATADIR" ] ||
	FB_IDATADIR=$FB_BASEDIR/data/$FB_INTERFACENAME	# directory containing all data files

[ -n "$FB_INFILEDIR" ] ||
	FB_INFILEDIR=$FB_IDATADIR/input/$FB_REGION				# directory containing incoming data files

[ -n "$FB_ARCHIVEDIR" ] ||
	FB_ARCHIVEDIR=$FB_IDATADIR/archive			# directory where we archive imported data files

[ -n "$FB_OUTFILEDIR" ] ||
	FB_OUTFILEDIR=$FB_IDATADIR/output			# directory where we put export data files

[ -n "$FB_SENTDIR" ] ||
	FB_SENTDIR=$FB_IDATADIR/sent				# directory where we put sent data files


#  logs
[ -n "$FB_LOG" ] ||
	FB_LOG=$FB_LOGDIR/$FB_INTERFACENAME$FB_LOGPOSTFIX.log	# log file name

[ -n "$FB_WARNINGLOG" ] ||
	FB_WARNINGLOG=$FB_LOGDIR/${FB_INTERFACENAME}_warnings$FB_LOGPOSTFIX.log	# warning log file name

[ -n "$FB_WARNINGPATTERN" ] ||
	FB_WARNINGPATTERN="WARNING:"				# search pattern to find WARNINGs in log file


#  sqls
[ -n "$FB_SQLBEGINFILE" ] ||
	FB_SQLBEGINFILE=							# BEGIN sql script

[ -n "$FB_SQLEXPORTFILE" ] ||
	FB_SQLEXPORTFILE=							# EXPORT sql script

[ -n "$FB_SQLIMPORTFILE" ] ||
	FB_SQLIMPORTFILE=							# IMPORT sql script

[ -n "$FB_SQLIMPORTFILE1" ] ||
	FB_SQLIMPORTFILE1=							# IMPORT sql script



[ -n "$FB_SQLIMPORTFILE2" ] ||
	FB_SQLIMPORTFILE2=							# IMPORT sql script

[ -n "$FB_SQLENDFILE" ] ||
	FB_SQLENDFILE=								# END sql script

[ -n "$FB_SQLCLEANUPFILE" ] ||
	FB_SQLCLEANUPFILE=							# CLEANUP sql script

[ -n "$FB_SQLBEGINARGS" ] ||
	FB_SQLBEGINARGS=							# arguments for call of BEGIN sql script

[ -n "$FB_SQLEXPORTARGS" ] ||
	FB_SQLEXPORTARGS=							# arguments for call of EXPORT sql script

[ -n "$FB_SQLIMPORTARGS" ] ||
	FB_SQLIMPORTARGS=							# arguments for call of IMPORT sql script

[ -n "$FB_SQLENDARGS" ] ||
	FB_SQLENDARGS=								# arguments for call of END sql script

[ -n "$FB_SQLCLEANUPARGS" ] ||
	FB_SQLCLEANUPARGS=							# arguments for call of CLEANUP sql script


#  database connection
[ -n "$FB_DB" ] ||
	FB_DB=										# database name

[ -n "$FB_DBUSER" ] ||
	FB_DBUSER=									# database user name

[ -n "$FB_DBPASSWD" ] ||
	FB_DBPASSWD=								# database password


#  emails
[ -n "$FB_ERRORMAILTO" ] ||
	FB_ERRORMAILTO=								# mail address for error mails

[ -n "$FB_SUCCESSMAILTO" ] ||
	FB_SUCCESSMAILTO=							# mail address for success mails

[ -n "$FB_WARNINGMAILTO" ] ||
	FB_WARNINGMAILTO=							# mail address for warning mails

[ -n "$FB_SENDFILESTO" ] ||
	FB_SENDFILESTO=								# mail address for export data files

[ -n "$FB_MAILFROM" ] ||
	FB_MAILFROM=								# mail from address for blat mails

[ -n "$FB_SMTPHOST" ] ||
	FB_SMTPHOST=								# mail smtp host for blat mails

# find programs and set environment variables
[ -r $FB_CSCRIPTDIR/fb_progs.sh ] && . $FB_CSCRIPTDIR/fb_progs.sh

## log all the variables
echo ">>>> environment settings summary of $FB_INTERFACEID interface" >>$FB_LOG
echo "  * interface info" >>$FB_LOG
echo "    FB_INTERFACEID = $FB_INTERFACEID" >>$FB_LOG
echo "    FB_INTERFACENAME = $FB_INTERFACENAME" >>$FB_LOG
echo "    FB_FULLINTERFACENAME = $FB_FULLINTERFACENAME" >>$FB_LOG
echo "  * switches" >>$FB_LOG
echo "    FB_DELETE_BEFORE = $FB_DELETE_BEFORE" >>$FB_LOG
echo "    FB_SAVEOLD_LASTONLY = $FB_SAVEOLD_LASTONLY" >>$FB_LOG
echo "    FB_RUNPERFILE = $FB_RUNPERFILE" >>$FB_LOG
echo "    FB_ARCHIVEINPUT = $FB_ARCHIVEINPUT" >>$FB_LOG
echo "    FB_NOLOAD = $FB_NOLOAD" >>$FB_LOG
echo "    FB_RETRYFTPDOWNLOAD = $FB_RETRYFTPDOWNLOAD" >>$FB_LOG
echo "    FB_USE_SFTP_INSTEAD_OF_FTP = $FB_USE_SFTP_INSTEAD_OF_FTP" >>$FB_LOG
echo "    FB_COUNTRY = $FB_COUNTRY" >>$FB_LOG 
echo "    FB_NEEDREGION = $FB_NEEDREGION" >>$FB_LOG
echo "  * directories" >>$FB_LOG
echo "    CURRENT WORKING DIRECTORY: `pwd`" >>$FB_LOG
echo "    FB_BASEDIR = $FB_BASEDIR" >>$FB_LOG
echo "    FB_CSCRIPTDIR = $FB_CSCRIPTDIR" >>$FB_LOG
echo "    FB_ISCRIPTDIR = $FB_ISCRIPTDIR" >>$FB_LOG
echo "    FB_LOGDIR = $FB_LOGDIR" >>$FB_LOG
echo "    FB_IDATADIR = $FB_IDATADIR" >>$FB_LOG
echo "    FB_INFILEDIR = $FB_INFILEDIR" >>$FB_LOG
echo "    FB_ARCHIVEDIR = $FB_ARCHIVEDIR" >>$FB_LOG
echo "    FB_OUTFILEDIR = $FB_OUTFILEDIR" >>$FB_LOG
echo "    FB_SENTDIR = $FB_SENTDIR" >>$FB_LOG
echo "  * logs" >>$FB_LOG
echo "    FB_LOG = $FB_LOG" >>$FB_LOG
echo "    FB_WARNINGLOG = $FB_WARNINGLOG" >>$FB_LOG
echo "    FB_ERRORLOG = $FB_ERRORLOG" >>$FB_LOG
echo "    FB_WARNINGPATTERN = $FB_WARNINGPATTERN" >>$FB_LOG
echo "  * sqls" >>$FB_LOG
echo "    FB_SQLBEGINFILE = $FB_SQLBEGINFILE" >>$FB_LOG
echo "    FB_SQLEXPORTFILE = $FB_SQLEXPORTFILE" >>$FB_LOG
echo "    FB_SQLIMPORTFILE = $FB_SQLIMPORTFILE" >>$FB_LOG
echo "    FB_SQLIMPORTFILE1 = $FB_SQLIMPORTFILE1" >>$FB_LOG
echo "    FB_SQLIMPORTFILE2 = $FB_SQLIMPORTFILE2" >>$FB_LOG
echo "    FB_SQLENDFILE = $FB_SQLENDFILE" >>$FB_LOG
echo "    FB_SQLCLEANUPFILE = $FB_SQLCLEANUPFILE" >>$FB_LOG
echo "    FB_SQLBEGINARGS = $FB_SQLBEGINARGS" >>$FB_LOG
echo "    FB_SQLEXPORTARGS = $FB_SQLEXPORTARGS" >>$FB_LOG
echo "    FB_SQLIMPORTARGS = $FB_SQLIMPORTARGS" >>$FB_LOG
echo "    FB_SQLENDARGS = $FB_SQLENDARGS" >>$FB_LOG
echo "    FB_SQLCLEANUPARGS = $FB_SQLCLEANUPARGS" >>$FB_LOG
echo "  * hostname dependent settings - current hostname is $FB_HOST running in $FB_COMPANYENV" >>$FB_LOG
echo "    * database connection" >>$FB_LOG
echo "      FB_DB = $FB_DB" >>$FB_LOG
echo "      FB_DBUSER = $FB_DBUSER" >>$FB_LOG
echo "      FB_DBPASSWD = $FB_DBPASSWD" >>$FB_LOG
echo "    * emails" >>$FB_LOG
echo "      FB_ERRORMAILTO = $FB_ERRORMAILTO" >>$FB_LOG
echo "      FB_SUCCESSMAILTO = $FB_SUCCESSMAILTO" >>$FB_LOG
echo "      FB_WARNINGMAILTO = $FB_WARNINGMAILTO" >>$FB_LOG
echo "      FB_SENDFILESTO = $FB_SENDFILESTO" >>$FB_LOG
echo "      FB_MAILFROM = $FB_MAILFROM" >>$FB_LOG
echo "      FB_SMTPHOST = $FB_SMTPHOST" >>$FB_LOG
echo "  * detected program names programs" >>$FB_LOG
echo "    FB_MAILPROG = '$FB_MAILPROG'" >>$FB_LOG
echo "    FB_SQLPLUS = '$FB_SQLPLUS'" >>$FB_LOG
echo "    FB_SQLLOAD = '$FB_SQLLOAD'" >>$FB_LOG
echo "    FB_TNSPING = '$FB_TNSPING'" >>$FB_LOG
echo "    FB_ZIP = '$FB_ZIP'" >>$FB_LOG
echo "    FB_FTP = '$FB_FTP'" >>$FB_LOG
echo "    FB_SFTP = '$FB_SFTP'" >>$FB_LOG
echo "  * os environment settings" >>$FB_LOG
echo "    PATH: = '$PATH'" >>$FB_LOG
echo "  * free disk space per partition/slice:" >>$FB_LOG
df -b >>$FB_LOG 2>&1
echo "" >>$FB_LOG



fi	# [ -z "$FB_ENV_SH" ]


#!/usr/bin/env sh

#
#	run.sh
#
#	SmartQuote Interfaces for Hewlett Packard GmbH
#
#	main shell script which runs the loaders
#


# do not treat empty variable substitution as an error (may be set in ~/.profile)
set +u

## determine the base directory
export FB_BASEDIR=${0%/*}
if [ "$FB_BASEDIR" = "$0" ] ; then 
	export FB_BASEDIR=..
else
	export FB_BASEDIR="${FB_BASEDIR}/.."
fi
#cd $FB_BASEDIR


export FB_SCRIPTDIR=$FB_BASEDIR/scripts					# directory containing all the scripts
export FB_LOGDIR=$FB_BASEDIR/logs						# directory for log files
export FB_ERRORLOGPOSTFIX=`date '+%Y%m%d_%H_%M'`		# error log file postfix
export FB_ERRORLOG=$FB_LOGDIR/sq_interfaces_errors_$FB_ERRORLOGPOSTFIX.log

# read the environment used for backends
if [ -r $FB_SCRIPTDIR/env.sh ] ; then
    . $FB_SCRIPTDIR/env.sh
fi



# find out where some important programs are located.  This will define
# certain variables. Especially we need FB_ZIP in this script.
. $FB_SCRIPTDIR/common/fb_progs.sh

# helper functions
type contains_argument >/dev/null 2>&1 ||
contains_argument() {
	result=0
	search_for="$1"
	shift
	for i in $@; do
		if [ "$search_for" = "$i" ]; then
			result=1
			break
		fi
	done
	echo $result
}

# Move files, specified as arguments, to filename.old(.gz). If FB_ZIP is set
# the files gets additionally zipped.
type save_old_files >/dev/null 2>&1 ||
save_old_files() {
	for i in $@; do
		if [ -f "$i" ]; then
			#appendix=`date -r $i +%Y%m%d%H%M`
			appendix="old"
			oldlogfile=$i.$appendix.gz
			rm -f $oldlogfile
			if [ -n "$FB_ZIP" ] ; then
				# we do have a zipper :-)
				cat $i | "$FB_ZIP" >$oldlogfile
				rm -f $i
			else
				# do not zip
				mv -f $i $oldlogfile
			fi
		fi
	done
}

## archive old log files
mkdir -p $FB_LOGDIR
if [ "$?" != 0 ]; then
	echo "unable to create log directory $FB_LOGDIR" >&2
	exit 1
fi
save_old_files $FB_ERRORLOG



# run the interface loaders
run_all=`contains_argument "all" $@`
if [ $# -eq 0 ]; then
	echo "usage: $0 [all] [crm] [cpa] [exp] [prm] [prs] [ssa] [usr]"
fi

# mind the order of interfaces (crm shall run before cpa)
for i in crm cpa exp prm prs ssa usr; do
	run_actual=`contains_argument $i $@`
	if [ $run_all -eq 1 -o $run_actual -eq 1 ]; then
		export FB_INTERFACENAME="$i"
		export FB_REGION="$2"
		export FB_LOGPOSTFIX='_'`date '+%Y%m%d_%H_%M'`
		export FB_LOG=$FB_LOGDIR/$FB_INTERFACENAME$FB_LOGPOSTFIX.log
		save_old_files $FB_LOG
		$FB_SCRIPTDIR/common/fb_main.sh -e -s
	fi
done
